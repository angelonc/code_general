%
%function []=vripplespeech(X,Fsx,fc,outfile,Fs,NS,alpha)
%
%	FILE NAME 	: V RIPPLE BIN SQR
%	DESCRIPTION 	: Binaural Virtual Ripple Sound
%			  Generated by controling the correlated activity
%			  across contra and ipsi channels
%
%			  CONTINOUS CORRELATION MAP
%			  DISCRETE TEMPORAL MODULATIONS
%
%	X
%	Fsx
%	fc
%	outfile		: Output File Name - No Extension
%	Fm1
%	Fm2
%       M               : Number of Samples
%       Fs              : Sampling Rate
%	NS		: Number of sinusoid carriers
%	alpha		: Window onset ratio 
%			  rt=alpha*dt
%			  rt==rise time
%			  dt==window half width
%			  OPTIONAL: Default=0.25
%
function []=vripplespeech(X,Fsx,fc,outfile,Fm1,Fm2,Fs,NS,alpha)

%Input Arguments
if nargin<17
	alpha=0.25;
end

%Decomposing speech signal
Henv=lowpass(10,5,Fsx,25,'off');
for k=1:length(fc)-1
	clc
	disp(['Extracting Envelope for Band ' int2str(k) ' of ' int2str(length(fc)-1)])

	%Bandpass Filtering Each Channel
%	TW=(fc(k+1)-fc(k))/4;
	TW=100;
	H=bandpass(fc(k),fc(k+1),TW,Fsx,30,'off');
	N=(length(H)-1)/2;
	NFFT=2^nextpow2(length(X));
	Y=convfft(X,H,N,NFFT,'y');

	%Extracting Envelope and Lowpass Filtering
	Z=abs(hilbert(Y));
	Nenv=(length(H)-1)/2;
	E=convfft(Z,Henv,Nenv,NFFT,'y');

	%Normalizing Envelope	
	i=find(E<0.01*max(E));
	E(i)=0.01*max(E)*ones(1,length(i));
	E=log10(E);
%	E=log10((E-min(E)+.1)/(max(E)-min(E)));
	Env(k,:)=(E-min(E))/(max(E)-min(E));
%i=find(Env>0.5);
%Env(i)=ones(1,length(i));
%i=find(Env<0.5);
%Env(i)=zeros(1,length(i));
end

%Octave Frequency Axis
XMax=log2(max(fc)/min(fc));
X=(0:NS-1)/(NS-1)*XMax;
faxis=fc(1)*2.^X;

%Envelope Time Axis
t=(1:length(Env(1,:)))/Fsx;

%Generating Correlation Envelope
FsEnv=2*Fm2;
taxis=(1:floor(max(t)*FsEnv))/FsEnv;
MEnv=length(taxis);
for k=1:NS-1

	i=max(find(faxis(k)./fc>=1));
	Corr(k,:)=interp1(t,Env(i,:),taxis,'cubic');

end
imagesc(Corr),set(gca,'YDir','normal'),colormap jet,shading flat,colorbar, pause(0)

%Generating Square Wave Window
dt=1/FsEnv*1000
rt=dt*alpha
W=splinewindow(Fs,3,dt,rt);
NW=length(W);

%Generating Contra and Ipsi Sound Sequence
M=round(max(taxis)*Fs);
X1=zeros(1,M+5000);
X2=zeros(1,M+5000);
for k=1:NS-1

	%Display Output
	clc
	disp(['Generating Carrier: ' int2str(k) ' of ' int2str(NS)])
	
	%Contra and Ipsi m-sequences
	Env1=noisesquare(Fm1,Fm2,FsEnv,MEnv);
	P=(1+Corr(k,:))/2;
	Env2=bernoullirnd(P,1,length(Env1));
	Env2=abs(Env2-Env1);

%psd(Env2-mean(Env2),32,FsEnv)
%axis([0 100 -20 5])
%pause
	%Finding ON Segments
	index1=find(Env1==1);
	index2=find(Env2==1);

	%Random Phase
	P=2*pi*rand;

	%Generating Contra Sounds
	for l=1:length(index1)

                %Contra and Ipsi 
                N1=round(index1(l)*Fs/FsEnv);

		%Contra and Ipsi Sounds
		X1(N1+1:N1+NW)=X1(N1+1:N1+NW)+W.*sin(2*pi*faxis(k)*(1:NW)/Fs+P);

	end

	%Generating Ipsi Sounds
	for l=1:length(index2)

                %Contra and Ipsi 
                N2=round(index2(l)*Fs/FsEnv);

		%Contra and Ipsi Sounds
		X2(N2+1:N2+NW)=X2(N2+1:N2+NW)+W.*sin(2*pi*faxis(k)*(1:NW)/Fs+P);

	end
end

%Combining Contra and Ipsi Sounds
X=zeros(1,2*length(X1));
X(1:2:length(X))=X1;
X(2:2:length(X))=X2;

%Writing Output
fid=fopen([outfile '.sw'],'w');
fwrite(fid,round(0.9*X/max(X)*1024*32),'int16');

%Converting to WAV file
outfile2=[outfile '.wav'];
f=['!sox -r ' int2str(Fs) ' -c 2 ' outfile '.sw ' outfile2];
eval(f)                                                                           
