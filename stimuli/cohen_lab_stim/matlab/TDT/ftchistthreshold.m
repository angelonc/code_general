%% function [t1,t2,t1m,t2m,tp,tnp,tn1,tn1m] = ftchistthreshold(FTCHist,T1,T2,alpha,disp)%%	FILE NAME 	: FTC THRESHOLD%	DESCRIPTION : Thresholds a tunning curve histogram according to poisson %                 spontaneous activity model%%	FTC	        : Tunning Curve Data Structure%                   FTCHist.Freq        - Frequency Axis%                   FTCHist.Level       - Sound Level Axis (dB)%                   FTCHist.time        - Time axis (msec)%                   FTC.NFTC            - Number of FTCs averaged%                   FTCHist.T1          - Minimum Time (msec)%                   FTCHist.T2          - Maximum Time (msec)%                   FTCHist.data        - Data matrix%   T1          : Start time for measuring spontaneous activity (msec)%   T2          : End time for measuring spontaneous activity (msec)%   alpha       : Desired significance value (Optional, Default==0.05)%   disp        : Display (Optional, Default=='y')%                 % RETURNED DATA%   t1          : Start time for significant FTC%   t2          : End time for significant FTC%   t1m         : Start time for FTC based on mean rate zero-crossing%   t2m         : End time for FTC based on mean rate zero-crossing%   tp          : Time of peak%   tnp         : Time of secondary negative response peak%   tn1         : Time of significance level crossing following tnp%   tn1m        : Time of mean rate level crossing following tnp%% (C) Monty A. Escabi, Oct 2005 (Edit Aug 2007)%function [t1,t2,t1m,t2m,tp,tnp,tn1,tn1m] = ftchistthreshold(FTCHist,T1,T2,alpha,disp)%Input Argumentsif nargin<4    alpha=0.05;    endif nargin<5    disp='y';    end%Averaging acrosss frequency and level and reshapingN1=size(FTCHist.data,1);N2=size(FTCHist.data,2);N3=size(FTCHist.data,3);time=FTCHist.time/1000; %Convert from mSeconds to Seconds%Finding Spontaneous Rate - "Lambda"dt=time(2)-time(1);T=N1*N2*dt*FTCHist.NFTC;MeanRate=reshape(sum(sum(FTCHist.data,1),2),1,N3)/FTCHist.NFTC/dt/N1/N2;    %Histogramindex=find(time<T2/1000 & time>T1/1000);Lambda=mean(MeanRate(index));%Thresholding - model spontaneous spiking as poisson distribution%Find distribution of N(T) and use for significance testN=0:10000;P=poisspdf(N,Lambda*T);k=1;while sum(P(1:k))<1-alpha    k=k+1;    end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%POSITIVE MEAN CROSSING STATISTICS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Finding Peak TimeMaxRate=max(MeanRate);index=find(max(MeanRate)==MeanRate);tp=time(index)*1000;%Finding Time Window which exceeds significance%Determined by first crossings of significance levelindex1=min(find(max(MeanRate)==MeanRate));  %Min required when firing rate is == at more than 2 binswhile MeanRate(index1)>N(k)/T & index1>1    index1=index1-1;endindex2=max(find(max(MeanRate)==MeanRate));  %Max required when firing rate is == at more than 2 binswhile MeanRate(index2)>N(k)/T & index2<N3-1    index2=index2+1;end%Linear Interpolation for finding significance crossingst1=1000*(time(index1)+(time(index1+1)-time(index1))*(N(k)/T-MeanRate(index1))/(MeanRate(index1+1)-MeanRate(index1)));t2=1000*(time(index2)-(time(index2)-time(index2-1))*(N(k)/T-MeanRate(index2))/(MeanRate(index2-1)-MeanRate(index2)));%Finding Time Window based on mean rate zero crossing%Determined by first crossings of mean firing rateindex1=min(find(max(MeanRate)==MeanRate));  %Min required when firing rate is == at more than 2 binswhile MeanRate(index1)>Lambda & index1>1    index1=index1-1;endindex2=max(find(max(MeanRate)==MeanRate));  %Max required when firing rate is == at more than 2 binswhile MeanRate(index2)>Lambda & index2<N3-1    index2=index2+1;end%Linear Interpolation for finding Mean crossingst1m=1000*(time(index1)+(time(index1+1)-time(index1))*(Lambda-MeanRate(index1))/(MeanRate(index1+1)-MeanRate(index1)));t2m=1000*(time(index2)-(time(index2)-time(index2-1))*(Lambda-MeanRate(index2))/(MeanRate(index2-1)-MeanRate(index2)));%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%NEGATIVE MEAN CROSSING STATISTICS%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%Finding Negative Peak TimeMinPeakRate=min(MeanRate(index2:N3));   %Mean Rate following response peakindex=min(index2-1+find(MinPeakRate==MeanRate(index2:N3)));tnp=time(index)*1000;%Finding first Mean Rate level crossing following response minimumindex3=index;while MeanRate(index3)<Lambda & index3<N3-1    index3=index3+1;end%Finding first Significance level crossing following response minimumindex4=index;while MeanRate(index4)<N(k)/T & index4<N3-1    index4=index4+1;end%Linear Interpolation for finding Mean crossingstn1m=1000*(time(index3)-(time(index3)-time(index3-1))*(Lambda-MeanRate(index3))/(MeanRate(index3-1)-MeanRate(index3)));tn1=1000*(time(index4)-(time(index4)-time(index4-1))*(N(k)/T-MeanRate(index4))/(MeanRate(index4-1)-MeanRate(index4)));%Plotting Histogram Data and Selected Data Segmentif disp=='y'    NFTC=FTCHist.NFTC;    epsilon=1E-10;    plot(time*1000,MeanRate,'k')    hold on        plot([min(time)*1000 max(time)*1000],[1 1]*N(k)/T,'r-.')    plot([t1-epsilon t1+epsilon ],[0 N(k)/T],'r-.')    plot([t2+epsilon t2-epsilon ],[N(k)/T 0],'r-.')        plot([min(time)*1000 max(time)*1000],[1 1]*Lambda,'b-.')    plot([t1m-epsilon t1m+epsilon ],[0 Lambda],'b-.')    plot([t2m+epsilon t2m-epsilon ],[Lambda 0],'b-.')        plot(tp,max(MeanRate),'rx')    plot(tnp,MinPeakRate,'ro')            xlabel('Time After Stimulus Onset (msec)')    ylabel('Spikes per Sec')end