%% function [FTCt,Mean,RegMask] = ftcthreshold(FTC,alpha,RegN,RegM)%%	FILE NAME 	: FTC THRESHOLD%	DESCRIPTION : Thresholds a tunning curve according to poisson %                 spontaneous activity model%%	FTC	        : Tunning Curve Data Structure%                   FTC.Freq                - Frequency Axis%                   FTC.Level               - Sound Level Axis (dB)%                   FTC.data                - Data matrix%   alpha       : Desired significance value (Default==0.05)%   RegN        : Minimum number of significant samples required for regularity%                 analysis. At least RegN samples need to be present within%                 a windown of size RegM x RegM for a point to be%                 considered real (OPTIONAL, Default=3)%   RegM        : Window size for regularity analysis (RegM x RegM). %                 (OPTIONAL, Default==3). RegM needs to be odd, otherwise%                 rounded up to next odd integer.%                 % RETURNED DATA%%   FTCt        : Thresholded Tunning Curve Data Structure%                   .Freq   - Frequency Axis%                   .Level  - Sound Level Axis (dB)%                   .data   - Data matrix%   Mean        : Mean Number of Spikes per FTC window (T2-T1)%   RegMask     : Regularity Mask, takes values of NaN if the%                 FTC did not exceed the regularity criterion%                 at a given SPL, 1 if it did satisfy it.%% (C) Monty A. Escabi, Edit Jan 2007%function [FTCt,Mean,RegMask] = ftcthreshold(FTC,alpha,RegN,RegM)%Input Argumentsif nargin<2    alpha=0.05;    endif nargin<3   RegN=4; endif nargin<4    RegM=3;endRegM=odd(RegM);%Selecting 1st and 2nd FTC row and reshapingN1=size(FTC.data(:,1:2),1);N2=size(FTC.data(:,1:2),2);X=reshape(FTC.data(:,1:2),1,N1*N2);%Finding MeanMean=mean(X);%Thresholding - model spontaneous spiking as Poisson distribution%Find distribution of N(T) and use for significance test at a level p<alphaN=0:100;P=(Mean).^N.*exp(-Mean)./factorial(N);k=1;while sum(P(1:k))<1-alpha    k=k+1;    endFTCt=FTC;i=find(FTCt.data<=N(k));FTCt.data(i)=zeros(size(i));%Regularity Check - Requires that at least RegN significant samples exists within %a window of size RegM x RegMW=ones(RegM,RegM);Mask=conv2(ceil(FTCt.data/max(max(FTCt.data))),W);ND=(RegM-1)/2;Mask=Mask(1+ND:size(Mask,1)-ND,1+ND:size(Mask,2)-ND);Mask=floor(Mask/(RegN-1)*.95);Mask=ceil(Mask/max(max(Mask)));FTCt.data=FTC.data.*Mask;%Converting 2-D Mask to Regularity Mask, NaN if it does not satisfy%regularity criterion at a given SPL, othwerwise 1RegMask=ceil(sum(Mask)/max(sum(Mask)))';index=find(RegMask==0);RegMask(index)=nan(size(index));index=find(sum(Mask)<=1);       %Require at least 2 samples at each SPL to exceed testRegMask(index)=nan(size(index));%Regularity Check - Requires that at least RegN significant samples exists within %a window of size RegM x RegM%W=ones(RegM,RegM);%W=conv2(ceil(FTC.data/max(max(FTC.data))),W);%ND=(RegM-1)/2;%W=W(1+ND:size(W,1)-ND,1+ND:size(W,2)-ND);%W=floor(W/(RegN-1)*.9);%W=ceil(W/max(max(W)));%FTCStats.Mask=ceil(sum(W)/max(sum(W)))';%index=find(FTCStats.Mask==0);%FTCStats.Mask(index)=nan(size(index));