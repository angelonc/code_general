%% function [t1,t2,t1m,t2m,tp,H] = ftchistsplthreshold(FTCHist,T1,T2,alpha,disp)%%	FILE NAME 	: FTC THRESHOLD%	DESCRIPTION : Thresholds a tunning curve histogram according to poisson %                 spontaneous activity model. Performs the thresholding at%                 separately at each SPL%%	FTC	        : Tunning Curve Data Structure%                   FTCHist.Freq        - Frequency Axis%                   FTCHist.Level       - Sound Level Axis (dB)%                   FTCHist.time        - Time axis (msec)%                   FTC.NFTC            - Number of FTCs averaged%                   FTCHist.T1          - Minimum Time (msec)%                   FTCHist.T2          - Maximum Time (msec)%                   FTCHist.data        - Data matrix%   T1          : Start time for measuring spontaneous activity (msec)%   T2          : End time for measuring spontaneous activity (msec)%   alpha       : Desired significance value (Optional, Default==0.05)%   disp        : Display (Optional, Default=='y')%                 % RETURNED DATA%   t1          : Start time for significant FTC%   t2          : End time for significant FTC%   t1m         : Start time for FTC based on mean rate zero-crossing%   t2m         : End time for FTC based on mean rate zero-crossing%   tp          : Time of peak%   H           : 0 if Peak is below significance level, 1 if above%% (C) Monty A. Escabi, September 2006%function [t1,t2,t1m,t2m,tp,H] = ftchistsplthreshold(FTCHist,T1,T2,alpha,disp)%Input Argumentsif nargin<4    alpha=0.05;    endif nargin<5    disp='y';    end%Averaging acrosss frequency and level and reshapingN1=size(FTCHist.data,1);N2=size(FTCHist.data,2);N3=size(FTCHist.data,3);time=FTCHist.time/1000; %Convert from mSeconds to Seconds%Finding Spontaneous Rate - "Lambda"dt=time(2)-time(1);T=N1*N2*dt*FTCHist.NFTC;        %Total duration if average across N1 (Freq) and N2 (Level)TN1=N1*dt*FTCHist.NFTC;         %Total duration if avearge across N1 (Freq)Rate=reshape(sum(sum(FTCHist.data,1),2),1,N3)/FTCHist.NFTC/dt/N1/N2;    %Histogram averaged across all SPL and FreqMeanRate=reshape(sum(FTCHist.data,1),N2,N3)/FTCHist.NFTC/dt/N1;         %Histograms averaged across Freqindex=find(time<T2/1000 & time>T1/1000);Lambda=mean(Rate(index));%Thresholding - model spontaneous spiking as poisson distribution%Find distribution of N(T) and use for significance testN=0:10000;P=poisspdf(N,Lambda*TN1);k=1;while sum(P(1:k))<1-alpha    k=k+1;    end%Finding Time Window which exceeds significance at each SPL%Determined by first crossings of significance levelfor l=1:N2        index1=min(find(max(MeanRate(l,:))==MeanRate(l,:)));  %Min required when firing rate is == at more than 2 bins    while MeanRate(l,index1)>N(k)/TN1 & index1>1        index1=index1-1;    end    index2=max(find(max(MeanRate(l,:))==MeanRate(l,:)));  %Max required when firing rate is == at more than 2 bins    while MeanRate(l,index2)>N(k)/TN1 & index2<N3-1         %& index2<length(MeanRate(l,:))-1        index2=index2+1;    end        %Linear Interpolation for finding significance crossings    t1(l)=1000*(time(index1)+(time(index1+1)-time(index1))*(N(k)/TN1-MeanRate(l,index1))/(MeanRate(l,index1+1)-MeanRate(l,index1)));    t2(l)=1000*(time(index2)-(time(index2)-time(index2-1))*(N(k)/TN1-MeanRate(l,index2))/(MeanRate(l,index2-1)-MeanRate(l,index2)));end%Finding Time Window based on mean rate zero crossing%Determined by first crossings of mean firing ratefor l=1:N2    index1=min(find(max(MeanRate(l,:))==MeanRate(l,:)));  %Min required when firing rate is == at more than 2 bins    while MeanRate(l,index1)>Lambda & index1>1        index1=index1-1;    end    index2=max(find(max(MeanRate(l,:))==MeanRate(l,:)));  %Max required when firing rate is == at more than 2 bins    while MeanRate(l,index2)>Lambda & index2<N3-1           %& index2<length(MeanRate(l,:))-1        index2=index2+1;    end         %Linear Interpolation for finding Mean crossings    t1m(l)=1000*(time(index1)+(time(index1+1)-time(index1))*(Lambda-MeanRate(l,index1))/(MeanRate(l,index1+1)-MeanRate(l,index1)));    t2m(l)=1000*(time(index2)-(time(index2)-time(index2-1))*(Lambda-MeanRate(l,index2))/(MeanRate(l,index2-1)-MeanRate(l,index2)));end%Finding Peak Time amd Significancefor l=1:N2    index=min(find(max(MeanRate(l,:))==MeanRate(l,:)));    tp(l)=time(index)*1000;    %Hypothesis Flag for Non Significant Results    if max(MeanRate(l,:))<N(k)/TN1        H(l)=0;        %Not Significant    else        H(l)=1;        %Significant    endendif disp=='y'               for l=1:N2            figure                %Plotting Histogram Data and Selected Data Segment        NFTC=FTCHist.NFTC;        epsilon=1E-10;        plot(time*1000,MeanRate(l,:),'k')        hold on                plot([min(time)*1000 max(time)*1000],[1 1]*N(k)/TN1,'r-.')        plot([t1(l)-epsilon t1(l)+epsilon ],[0 N(k)/TN1],'r-.')        plot([t2(l)+epsilon t2(l)-epsilon ],[N(k)/TN1 0],'r-.')                plot([min(time)*1000 max(time)*1000],[1 1]*Lambda,'b-.')        plot([t1m(l)-epsilon t1m(l)+epsilon ],[0 Lambda],'b-.')        plot([t2m(l)+epsilon t2m(l)-epsilon ],[Lambda 0],'b-.')            plot(tp(l),max(MeanRate(l,:)),'rs-')            xlabel('Time After Stimulus Onset (msec)')        ylabel('Spikes per Sec')    endend