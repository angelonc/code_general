%%function [MonData] = ftcmonotonicityonetrial(FTCHistboot,t1,t2,p,deltaX,RegN,RegM,Disp)%%	FILE NAME 	: FTC RATE LEVEL%	DESCRIPTION : Finds the rate level function across a fixed bandwidth.%                 Requires a bootstrap version of FTCHist as input (FTCHISTGENERATEBOOT)%%	FTCHist     : Tunning Curve Data Structure%                 .Freq     - Frequency Axis%                 .Level    - Sound Level Axis (dB)%                 .time     - Time axis (msec)%                 .NFTC     - Number of FTCs averaged%                 .T1       - Minimum Time (msec)%                 .T2       - Maximum Time (msec)%                 .data     - Data matrix%   t1          : Minimum time for analysis (msec)%   t2          : Maximum time for analysis (msec)%   p           : Significance level for thresholding tuning curve%   deltaX      : Number of octaves for bandwidth/monotonicity analysis%   RegN        : Minimum number of significant samples required for regularity%                 analysis. At least RegN samples need to be present within%                 a windown of size RegM x RegM for a point to be%                 considered real (OPTIONAL, Default=3)%   RegM        : Window size for regularity analysis (M x M). %                 (OPTIONAL, Default==3)%   Disp        : Display data 'y' or 'n' (Default=='n')%% RETURNED DATA%   MonData     : Output Data Sturcture%                 .PSTH     - PSTH at each level (data windowed dX units%                             about BF)%                 .RLC      - Rate Level Curve%                 .Sig      - Array containing significant (1) and non%                             significant %                             (0) sound levels obtained using FTCHISTTHRESHOLD %                 .Mask     - Regularity Mask, takes values of NaN if the%                             FTC did not exceed the regularity criterion%                             at a given SPL, 1 if it did satisfy it.%                 .Mean     - Best Frequency (BF, Hz)%                 .Std      - Half Bandwidth, Standard Deviation (Octaves)%                 .Skewness - Skewness at each SPL%                 .Threshold- Attenuation response Threhshold (dB)%                 .CF       - Characteristic Frequency%                 .SPLMax   - SPL with maximal response%% (C) Monty A. Escabi, Jan 2006 (Edited Aug 2007)%function [MonData] = ftcmonotonicityonetrial(FTCHist,t1,t2,p,deltaX,RegN,RegM,Disp)%Input Argumensif nargin<4    RegN=4;endif nargin<5    RegM=3;endif nargin<6    Disp='n';end%Generating Tuning Curve and FTC HistogramN1t=min(find(FTCHist.time>=t1));N2t=max(find(FTCHist.time<=t2));FTC=FTCHist;FTC.data=sum(sum(FTCHist.data(:,:,N1t:N2t,:),4),3);FTC.T1=t1;FTC.T2=t2;%Finding Centroid FrequenciesFTCStats=ftccentroid(FTC,p,RegN,RegM);      %NO LONGER REQUIRES FTCtUpperFreq=FTCStats.Mask.*FTCStats.Mean*2.^(deltaX/2);LowerFreq=FTCStats.Mask.*FTCStats.Mean*2.^(-deltaX/2);%Checking for significant data. If not exit the function.if sum(FTCStats.Mask==1)<=2    MonData.RLC=nan(9,1);    MonData.RLCb=nan(9,1000);    MonData.Dp1=nan(9,1);    MonData.Dp1b=nan(9,1000);    MonData.DpN=nan(9,1);    MonData.MonIndex=nan(1);    MonData.MonIndexb=nan(1,1000);    MonData.Slope=nan(1);    MonData.Sig=nan(9,1);    MonData.Mask=nan(9,1);    MonData.Mean=nan(9,1);    MonData.Std=nan(9,1);    MonData.Threshold=nan(1);    MonData.CF=nan(1);    MonData.SPLMax=nan(1);        disp(' ');    disp('Function exit. Data is not significant.')    return;end%Selecting Range of Frequncies About Centroid And Generatingn RLCfor k=1:length(LowerFreq)    if isnan(LowerFreq(k))        N1f(k)=nan(1);        N2f(k)=nan(1);        RLC(k)=nan(1);        Sig(k)=0;    else        N1f(k)=min(find(FTCHist.Freq>LowerFreq(k)));        N2f(k)=max(find(FTCHist.Freq<UpperFreq(k)));        RLC(k)=mean(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,:),3),1)/(t2-t1)*1000;        %RLCVar(k)=var(sum(mean(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,:),1),3)/(t2-t1)*1000,0,4);        Sig(k)=1;    endend%Regenerating RLC and Removing 'NaN'kk=find(RLC'==max(RLC) & ~isnan(LowerFreq));for k=1:length(LowerFreq)    if isnan(LowerFreq(k))        N1f(k)=min(find(FTCHist.Freq>mean(LowerFreq(kk))));        N2f(k)=max(find(FTCHist.Freq<mean(UpperFreq(kk))));        %RLCtrial(k,:)=mean(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,:),3),1)/(t2-t1)*1000;        RLC(k)=mean(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,:),3),1)/(t2-t1)*1000;        %RLCVar(k)=var(sum(mean(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,:),1),3)/(t2-t1)*1000,0,4);    else        N1f(k)=min(find(FTCHist.Freq>LowerFreq(k)));        N2f(k)=max(find(FTCHist.Freq<UpperFreq(k)));        %RLCtrial(k,:)=mean(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,:),3),1)/(t2-t1)*1000;        RLC(k)=mean(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,:),3),1)/(t2-t1)*1000;        %RLCVar(k)=var(sum(mean(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,:),1),3)/(t2-t1)*1000,0,4);    endendN1f=N1f';N2f=N2f';%Bootstrapping RLC Mean and Variance (Used to estimate bootstrap D-Prime)%NB=1000;%kk=find(RLC==max(RLC) & ~isnan(LowerFreq'));%for n=1:NB%    for k=1:length(LowerFreq)%        if isnan(LowerFreq(k))%            bootindex=randsample(FTCHist.NFTC,FTCHist.NFTC,1);%            RLCb(k,n)=mean(sum(mean(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,bootindex),4),3),1)/(t2-t1)*1000;%            RLCVarb(k,n)=var(sum(mean(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,bootindex),1),3)/(t2-t1)*1000,0,4);%        else%            bootindex=randsample(FTCHist.NFTC,FTCHist.NFTC,1);%            RLCb(k,n)=mean(sum(mean(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,bootindex),4),3),1)/(t2-t1)*1000;%            RLCVarb(k,n)=var(sum(mean(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,bootindex),1),3)/(t2-t1)*1000,0,4);%        end%    end%    %end%Generating PSTH at each level (windowed around dX relative to the BF)for k=1:length(LowerFreq)    MonData.PSTH(k,:)=reshape(sum(sum(FTCHist.data(:,k,:,:),4),1),1,size(FTCHist.data,3));end%Bootstrapping RLC Mean and Variance (Used to estimate bootstgrap D-Prime)%Use same seed for mean and variance so for estimating bootstrap D-Prime%NB=1000;%rand('state',0);%RLCb=bootstrp(NB,'mean',RLCtrial')';%rand('state',0);%RLCVarb=bootstrp(NB,'var',RLCtrial')';%Computing D-Prime Relative to Maxindex=find(RLC==max(RLC));%MaxRLC=RLC(index(1));%VarMaxRLC=var(RLCb(index(1),:));%DpN=(RLC-MaxRLC)./sqrt(var(RLCb')+VarMaxRLC);%Dp1=(RLC-MaxRLC)./sqrt(RLCVar+max(RLCVar));%MonIndex=min(Dp1(index(1):length(Dp1)));SPLMax=FTC.Level(index);%Bootstrapping D-Prime and Monotonicity Index%for n=1:NB%    index=find(RLCb(:,n)==max(RLCb(:,n)));    %    MaxRLCb(n)=RLCb(index(1),n);%    Dp1b(:,n)=(RLCb(:,n)-MaxRLCb(n))./sqrt(RLCVarb(:,n)+max(RLCVarb(:,n)));%    MonIndexb(n)=min(Dp1b(index(1):size(Dp1b,1),n));%end%%Finding slope for upper sound levels%index=find(Dp1==0):length(Dp1);%if length(index)>=2%    [P,S] = polyfit(FTC.Level(index),Dp1(index),1);%    Slope=P(1);%else%    Slope=nan(1);%end%Creating Data structureMonData.RLC=RLC';%MonData.RLCb=RLCb;%MonData.Dp1=Dp1';%MonData.Dp1b=Dp1b;%MonData.DpN=DpN';%MonData.MonIndex=MonIndex;%MonData.MonIndexb=MonIndexb;%MonData.Slope=Slope;MonData.Sig=Sig';MonData.Mask=FTCStats.Mask;MonData.Mean=FTCStats.Mean;MonData.Std=FTCStats.Std;MonData.Threshold=FTCStats.Threshold;MonData.CF=FTCStats.CF;MonData.SPLMax=SPLMax;%Plotting Results if Desiredif Disp=='y'    subplot(221)    FTCt=ftcthreshold(FTC,p,RegN,RegM);    imagesc(log2(FTCt.Freq/2000),FTCt.Level+90,FTCt.data'/(FTCt.T2-FTCt.T1)*1000/FTCt.NFTC);    set(gca,'YDir','normal')    caxis([0 max(max(FTCt.data'/(FTCt.T2-FTCt.T1)*1000/FTCt.NFTC))])    hold on    plot(log2(FTCStats.Mean/2000).*FTCStats.Mask,FTC.Level+90,'ko')    F1=(log2((FTCStats.Mean')/2000)-FTCStats.Std').*FTCStats.Mask';    F2=(log2((FTCStats.Mean')/2000)+FTCStats.Std').*FTCStats.Mask';    plot([F1; F2],[FTC.Level+90; FTC.Level+90],'k-')    plot(log2(FTCStats.CF/2000),FTCStats.Threshold+90,'r*')    set(gca,'YDir','normal')    set(gca,'Xtick',[0 1 2 3 4])    set(gca,'XtickLabel',[2 4 8 16 32])    colorbar    xlabel('Frequency (kHz)')    ylabel('SPL (dB)')            subplot(222)    imagesc(log2(FTC.Freq/2000),FTC.Level+90,FTC.data'/(FTC.T2-FTC.T1)*1000/FTC.NFTC);    set(gca,'YDir','normal')    caxis([0 max(max(FTC.data'/(FTC.T2-FTC.T1)*1000/FTC.NFTC))])    hold on    plot(log2(FTCStats.Mean/2000).*FTCStats.Mask,FTC.Level+90,'ko')    F1=(log2((FTCStats.Mean')/2000)-FTCStats.Std').*FTCStats.Mask';    F2=(log2((FTCStats.Mean')/2000)+FTCStats.Std').*FTCStats.Mask';    plot([F1; F2],[FTC.Level+90; FTC.Level+90],'k-')    plot(log2(FTCStats.CF/2000),FTCStats.Threshold+90,'r*')    set(gca,'YDir','normal')    set(gca,'Xtick',[0 1 2 3 4])    set(gca,'XtickLabel',[2 4 8 16 32])    colorbar    xlabel('Frequency (kHz)')    ylabel('SPL (dB)')        subplot(223)    %errorbar(FTCHist.Level,mean(RLCb'),std(RLCb'))    plot(FTCHist.Level,RLC)    ylabel('Spike Rate (spikes/s)')    xlabel('Attenuation (dB)')    %subplot(224)    %errorbar(FTCHist.Level,Dp1,std(Dp1b'))    %xlabel('Frequency (kHz)')    %ylabel('D-Prime')    end