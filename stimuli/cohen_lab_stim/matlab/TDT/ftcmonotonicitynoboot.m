%%function [RLC,Sig,Hist] = ftcmonotonicitynoboot(FTCHist,t1,t2,t1H,t2H,p,deltaX,Disp)%%   FILE NAME   : FTC RATE LEVEL%   DESCRIPTION : Finds the rate level function across a fixed bandwidth.%                 Requires FTCHist as input (FTCHISTGENERATE). Same as%                 FTCMONOTONICITY except it does not reauire FTCHistboot%                 Input. Does not return z-score.%%   FTCHist     : Tunning Curve Data Structure%                 FTCHist.Freq  - Frequency Axis%                 FTCHist.Level - Sound Level Axis (dB)%                 FTCHist.time  - Time axis (msec)%                 FTCHist.NFTC  - Number of FTCs averaged%                 FTCHist.T1    - Minimum Time (msec)%                 FTCHist.T2    - Maximum Time (msec)%                 FTCHist.data  - Data matrix%   t1          : Minimum time for RLC analysis (msec)%   t2          : Maximum time for RLC analysis (msec)%   t1H         : Minimum time for Histogram analaysis (msec)%   t2H         : Macximum time for Histogram analysis (msec)%   p           : Significance level for thresholding tuning curve%   deltaX      : Number of octaves for bandwidth/monotonicity analysis%   Disp        : Display data 'y' or 'n' (Default=='n')%% RETURNED DATA%   RLC         : Rate Level Curve%   Sig         : Array containing significant (1) and non significant (0) sound %                 levels obtained using FTCHISTTHRESHOLD %   Hist        : Response Histogram at each SPL%% (C) Monty A. Escabi, December 2006%function [RLC,Sig,Hist] = ftcmonotonicitynoboot(FTCHist,t1,t2,t1H,t2H,p,deltaX,Disp)%Input Argumensif nargin<8    Disp='n';end%Generating Tuning Curve and FTC HistogramN1t=min(find(FTCHist.time>=t1));N2t=max(find(FTCHist.time<t2));N1tH=min(find(FTCHist.time>=t1H));N2tH=max(find(FTCHist.time<=t2H));FTC=FTCHist;FTC.data=sum(FTCHist.data(:,:,N1t:N2t,:),3);FTCt=ftcthreshold(FTC,p);FsHist=1/(FTCHist.time(2)-FTCHist.time(1))*1000;%Finding Centroid FrequenciesFTCStats=ftccentroid(FTCt,3,3);UpperFreq=FTCStats.Mean*2.^(deltaX/2).*FTCStats.Mask;       %Will produce NaN if it does not satisfy regularity, checked later onLowerFreq=FTCStats.Mean*2.^(-deltaX/2).*FTCStats.Mask;%Selecting Range of Frequncies About Centroid And Generatingn RLCfor k=1:length(LowerFreq)    if isnan(LowerFreq(k))        N1f(k)=nan(1);        N2f(k)=nan(1);        RLC(k)=nan(1);        Sig(k)=0;    else        N1f(k)=min(find(FTCHist.Freq>mean(LowerFreq(k))));        N2f(k)=max(find(FTCHist.Freq<mean(UpperFreq(k))));        %RLC(k)=sum(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t),3),1);        RLC(k)=mean(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t),3),1)/FTCHist.NFTC/(t2-t1)*1000;        Hist(k,:)=mean(FTCHist.data(N1f(k):N2f(k),k,N1tH:N2tH),1)/FTCHist.NFTC*FsHist;        Sig(k)=1;    endend%Regenerating RLC and Removing 'NaN'kk=find(RLC==max(RLC));for k=1:length(LowerFreq)    if isnan(LowerFreq(k)) & ~isempty(kk)        N1f(k)=min(find(FTCHist.Freq>mean(LowerFreq(kk))));        N2f(k)=max(find(FTCHist.Freq<mean(UpperFreq(kk))));        %RLC(k)=sum(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t),3),1);        RLC(k)=mean(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t),3),1)/FTCHist.NFTC/(t2-t1)*1000;        Hist(k,:)=mean(FTCHist.data(N1f(k):N2f(k),k,N1tH:N2tH),1)/FTCHist.NFTC*FsHist;    elseif isempty(kk)        RLC(k)=nan(1);        Hist(k,:)=nan(1,size(FTCHist.data,3));    else        N1f(k)=min(find(FTCHist.Freq>mean(LowerFreq(k))));        N2f(k)=max(find(FTCHist.Freq<mean(UpperFreq(k))));        %RLC(k)=sum(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t,:),3),1);        RLC(k)=mean(sum(FTCHist.data(N1f(k):N2f(k),k,N1t:N2t),3),1)/FTCHist.NFTC/(t2-t1)*1000;        Hist(k,:)=mean(FTCHist.data(N1f(k):N2f(k),k,N1tH:N2tH),1)/FTCHist.NFTC*FsHist;    endendN1f=N1f';N2f=N2f';%Plotting Results if Desiredif Disp=='y'    subplot(221)    pcolor(FTCt.Freq,FTCt.Level,FTCt.data'),set(gca,'XScale','log')    hold on    plot(FTCStats.Mean,FTCt.Level,'ro')    xlabel('Frequency (kHz)')    ylabel('Attenuation (dB)')        subplot(222)    pcolor(FTCt.Freq,FTCt.Level,FTC.data'),set(gca,'XScale','log')    xlabel('Frequency (kHz)')    ylabel('Attenuation (dB)')        subplot(223)    plot(FTCHist.Level,RLC)    ylabel('Spike Count')    xlabel('Attenuation (dB)')    end