%
%function [Ravg,Rstd,R05,R01]=rastercorr2(RASTER1,RASTER2,taxis,T,NB)
%
%
%       FILE NAME       : RASTER CORR 2
%       DESCRIPTION     : Across-trial correlation function between two rasters. 
%                         Determines the trial standard deviation and p<0.01 and p<0.05 
%                         confidence intervals of Ravg with a Bootstrap procedure
%
%	RASTER1 	: Rastergram 1
%   RASTER2     : Rastergram 2
%	taxis		: Time Axis
%	T           : Temporal lag to compute xcorrelation (msec)
%	NB          : Number of Bootstraps for Cross Correlation Estimate
%                 Default = 500
%
%RETURNED VALUES
%	Ravg		: Average cross-trial correlation function
%	Rstd		: Across-trial correlation standard deviation array
%	R05         : 2xlength(Ravg) matrix containg the possitive and 
%                 negative p<0.05 confidence intervals
%	R01         : 2xlength(Ravg) matrix containg the possitive and 
%                 negative p<0.01 confidence intervals
%
function [Ravg12,Rstd,R05,R01]=rastercorr(RASTER1,RASTER2,taxis,T,NB)

%Input Arguments
if nargin<4
	NB=500;
end

%Rastergram Lenght
L=size(RASTER1,2);
M=size(RASTER1,1);

%Sampling Rate for Rastergram
Fs=1/taxis(1);

%Maximum Temporal Delay
N=ceil(T/1000*Fs);

%Normalizing Rastergram so that maximum bin value is 1/dt=Fs
RASTER1=RASTER1*Fs;
RASTER2=RASTER2*Fs;

%Performing cross-trial correlation -> symetry allows us to reduce computation
%Finding the Average Cross-Trial Correlation
R=[];
Ravg=zeros(1,2*N+1);
for k=1:M
	clc
	disp(['Computing cross-channel correlation for channel: ' num2str(k)])
	for l=1:M
		if exist('/usr/local/bin/xcorrfl')
	%		R=[R;xcorrfft(RASTER1(k,:),RASTER2(l,:),N)/Fs/max(taxis)];
			R=[R;xcorr(RASTER1(k,:),RASTER2(l,:),N)/Fs/max(taxis)];
		else
			R=[R;xcorr(RASTER1(k,:),RASTER2(l,:),N)/Fs/max(taxis)];
		end
	end
end

%Finding Average Correlation and Confidence Intervals using Bootstrap
if size(Ravg,1)>1
	Ravg12=mean(R);
else
	Ravg12=R;
end
if NB~=0
	[Rstd,R05,R01]=rastercorrbootstrap(R,NB);
else
	R05=-9999;
	R01=-9999;
end