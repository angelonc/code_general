%
%function []=vripplebin(outfile,f1,f2,Fm1,Fm2,FM,RD,M,Fs,NS,RP,alpha)
%
%	FILE NAME 	: V RIPPLE BIN
%	DESCRIPTION 	: Binaural Virtual Ripple Sound
%			  Generated by controling the correlated activity
%			  across contra and ipsi channels
%			
%			  DISCRETE CORRELATION MAP  (0 or 1)
%			  CONTINOUS TEMPORAL MODULATIONS
%
%	outfile		: Output File Name - No Extension
%	f1		: Minimum Carrier Frequency
%	f2		: Maximum Carrier Frequency
%	Fm1		: Minimum temporal modulation rate
%	Fm2		: Maximum temporal modulation rate
%	FM		: Ripple temporal modulation rate
%	RD		: Ripple density
%       M               : Number of Samples
%       Fs              : Sampling Rate
%	NS		: Number of sinusoid carriers
%	RP		: Ripple Phase [0,2*pi]
%			  Default : Choosen randomly
%	alpha		: Window onset ratio 
%			  rt=alpha*dt
%			  rt==rise time
%			  dt==window half width
%			  OPTIONAL: Default=0.25
%
function []=vripplebin(outfile,f1,f2,Fm1,Fm2,FM,RD,M,Fs,NS,RP,alpha)

%Input Arguments
if nargin<11
	RP=2*pi*rand;
end
if nargin<12
	alpha=0.25;
end

%Octave Frequency Axis
XMax=log2(f2/f1);
X=(0:NS-1)/(NS-1)*XMax;
faxis=f1*2.^X;

%Generating Correlation Envelope
FsEnv=2*Fm2;
MEnv=ceil(M/Fs*FsEnv);
for k=1:NS
	Corr(k,:)=round(sin(2*pi*RD*X(k)+2*pi*FM*(1:MEnv)/FsEnv+RP)/2+0.5);
end
pcolor(Corr),colormap jet,shading flat,colorbar, pause(0)

%Generating Square Wave Window
%dt=1/FsEnv*1000/(1+alpha);
dt=1/FsEnv*1000;
rt=dt*alpha;
W=splinewindow(Fs,3,dt,rt);
NW=length(W);

%Generating Contra and Ipsi Sound Sequence
X1=zeros(1,M+5000);
X2=zeros(1,M+5000);
S=0
for k=1:NS

	%Display Output
	clc
	disp(['Generating Carrier: ' int2str(k) ' of ' int2str(NS)])
	
	%Temporal Envelopes
	Env=noisesquare(Fm1,Fm2,FsEnv,MEnv);
	EnvRand=noisesquare(Fm1,Fm2,FsEnv,MEnv);

	%Contra and Ipsi m-sequences
	Env1=Env;
	Env2=Env.*Corr(k,:)+EnvRand.*(1-Corr(k,:));
%psd(Env1,32,FsEnv)
%axis([0 25 -20 5])
%pause
	%Finding ON Segments
	index1=find(Env1==1);
	index2=find(Env2==1);

	%Random Phase
	P=2*pi*rand;

	%Generating Contra Sounds
	for l=1:length(index1)

                %Contra and Ipsi 
                N1=round(index1(l)*Fs/FsEnv);

		%Contra and Ipsi Sounds
		X1(N1+1:N1+NW)=X1(N1+1:N1+NW)+W.*sin(2*pi*faxis(k)*(1:NW)/Fs+P);

	end

	%Generating Ipsi Sounds
	for l=1:length(index2)

                %Contra and Ipsi 
                N2=round(index2(l)*Fs/FsEnv);

		%Contra and Ipsi Sounds
		X2(N2+1:N2+NW)=X2(N2+1:N2+NW)+W.*sin(2*pi*faxis(k)*(1:NW)/Fs+P);

	end
end

%Combining Contra and Ipsi Sounds
X=zeros(1,2*length(X1));
X(1:2:length(X))=X1;
X(2:2:length(X))=X2;

%Writing Output
fid=fopen([outfile '.sw'],'w');
fwrite(fid,round(0.9*X/max(X)*1024*32),'int16');

%Converting to WAV file
outfile2=[outfile '.wav'];
f=['!sox -r ' int2str(Fs) ' -c 2 ' outfile '.sw ' outfile2];
eval(f) 

%Closing Files
fclose all
