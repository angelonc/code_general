%
%function []=vrippleitd(outfile,f1,f2,Fm1,Fm2,FM,RD,M,Fs,NS,RP,itdmax,alpha)
%
%	FILE NAME 	: V RIPPLE ITD
%	DESCRIPTION 	: Binaural Virtual Ripple Sound
%			  Generated by an ITD map
%
%	outfile		: Output File Name - No Extension
%	f1		: Minimum Carrier Frequency
%	f2		: Maximum Carrier Frequency
%	Fm1		: Minimum temporal modulation rate
%	Fm2		: Maximum temporal modulation rate
%	FM		: Ripple temporal modulation rate
%	RD		: Ripple density
%       M               : Number of Samples
%       Fs              : Sampling Rate
%	NS		: Number of sinusoid carriers
%	RP		: Ripple Phase [0,2*pi]
%			  Default : Choosen randomly
%	itdmax		: Maximum ITD ( us ) ( Default: 500 us )
%       alpha           : Window onset ratio
%                         rt=alpha*dt
%                         rt==rise time
%                         dt==window half width
%			  OPTIONAL: Default=0.5
%
function []=vrippleitd(outfile,f1,f2,Fm1,Fm2,FM,RD,M,Fs,NS,RP,itdmax,alpha)

%Input Arguments
if nargin<11
	RP=2*pi*rand;
end
if nargin<12
	itdmax=500;
end
if nargin<13
	alpha=0.25;
end
%Octave Frequency Axis
XMax=log2(f2/f1);
X=(0:NS-1)/(NS-1)*XMax;
faxis=f1*2.^X;

%Generating ITD Envelope
FsEnv=Fm2;
MEnv=M/Fs*FsEnv;
for k=1:NS
%	ITD(k,:)=round(sin(2*pi*RD*X(k)+2*pi*FM*(1:MEnv)/FsEnv+RP)/2+0.5);
%	ITD(k,:)=-1+2*round(sin(2*pi*RD*X(k)+2*pi*FM*(1:MEnv)/FsEnv+RP)/2+0.5);
	ITD(k,:)=sin(2*pi*RD*X(k)+2*pi*FM*(1:MEnv)/FsEnv+RP);
%	index=find(ITD(k,:)==0);
%	ITD(k,index)=rand(1,length(index));
end
ITD=itdmax/1E6*ITD;	%Normalize Map from usec to sec
%pcolor(ITD),colormap jet,shading flat,colorbar, pause

%Generating Square Wave Window
dt=1/FsEnv/2*1000/(1+alpha);
dt=1/FsEnv/2*1000;
rt=dt*alpha;
W=splinewindow(Fs,3,dt,rt);
NW=length(W);

%Generating Contra and Ipsi Sound Sequence
X1=zeros(1,M+5000);
X2=zeros(1,M+5000);
for k=1:NS

	%Display Output
	clc
	disp(['Generating Carrier: ' int2str(k) ' of ' int2str(NS)])

	%Temporal Envelope
	Env=noisesquare(Fm1,Fm2,FsEnv,MEnv);
	index=find(Env==1);


	%Generating Contra and Ipsi Sounds
	for l=1:length(index)
		%Contra and Ipsi Delays in number of samples
		N1=round(index(l)*NW+ITD(k,l)*Fs/2);
		N2=round(index(l)*NW-ITD(k,l)*Fs/2);

		%Random Phase
		P=2*pi*rand;

		%Contra and Ipsi Sounds
		X1(N1+1:N1+NW)=X1(N1+1:N1+NW)+W.*sin(2*pi*faxis(k)*(1:NW)/Fs+P);
		X2(N2+1:N2+NW)=X2(N2+1:N2+NW)+W.*sin(2*pi*faxis(k)*(1:NW)/Fs+P);
	end

end

%Combining Contra and Ipsi Sounds
X=zeros(1,2*length(X1));
X(1:2:length(X))=X1;
X(2:2:length(X))=X2;

%Writing Output
fid=fopen([outfile '.sw'],'w');
fwrite(fid,round(0.9*X/max(X)*1024*32),'int16');                                
 
%Converting to WAV file
outfile2=[outfile '.wav'];
f=['!sox -r ' int2str(Fs) ' -c 2 ' outfile '.sw ' outfile2];
eval(f)                                                                         
