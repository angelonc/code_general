%
%function [InfoData,InfoDataS]=infwordrasterperiodicdt(RASTER,B,Fm,T)
%
%   FILE NAME       : INF WORD RASTER PERIOD DT
%   DESCRIPTION     : Entropy & Noise Entropy of a periodic Spike Train 
%                     obtained from the rastergram by computing the 
%                     Probability Distribution, P(W|t,s), of finding a B 
%                     letter Word, W, in the Spike Train at time T for a
%                     given periodic stimulus, s.
%                   
%                     The entropy is computed at multiple spike train 
%                     time-scales (dt) using a procedure similar to Panzeri
%                     et al. For each time-scale, a specifid ammount of
%                     jitter is added to the spike train, which removes
%                     temporal details finer than the jitter. 
%
%                     The Information is computed for both the raw data as
%                     well as for a shuffled raster condition. The shuffled
%                     raster is obtained by generating a Poisson
%                     distributed spike train with identical firing rate.
%                     The information associated with this condition is the
%                     information bias.
%
%   RASTER          : Rastergram
%	B               : Length of Word, number of bits per cycle for
%                     generating P(W) and P(W,t)
%   Fm              : Sound modulation Frequency (Hz)
%   T               : Amount of time to remove at begingin of raster
%                     (Default==0)
%
%Returned Variables
%
%   InfoData,InfoDataS  : Data structurea containing all mutual information
%                         results
%
%                     .HWordt   : Noise Entropy per Word
%                     .HSect    : Noise Entropy per Second
%                     .HSpiket  : Noise Entropy per Spike
%                     .HWord    : Entropy per Word
%                     .HSec     : Entropy per Second
%                     .HSpike   : Entropy per Spike
%                     .Rate     : Mean Spike Rate
%                     .W        : Coded words for entropy calculation
%                     .Wt       : Coded words for noise entropy calculation
%                     .P        : Word distribution function
%                     .Pt       : Word distribution function for noise entropy
%                     .dt       : Actual Temporal Resolution Used
%
% (C) Monty A. Escabi, Aug. 2012
%
function [InfoData,InfoDataS,InfoDataBias]=infwordrasterperiodicdt(RASTER,B,Fm,sig,T)

%Computing Entropy and Noise Entropy at multiple jitter conditions
p=1;
lambdan=0;
for k=1:length(sig)
    
%    [RAS]=rasteraddjitterunif(RASTER,sig(k),p,lambdan);
    [RAS]=rasteraddjitterpanzeri(RASTER,sig(k));
%    [RAS]=rasteraddjitterpanzericycle(RASTER,sig(k));
%    [InfoData(k)]=infwordrasterperiodic(RAS,B,Fm,T);
    [InfoData(k)]=infwordrasterperiodicpanzeri(RAS,B,Fm,T)
    M1=length(InfoData(k).Pt);
    M2=length(InfoData(k).P);
    M1=size([InfoData(1).Wt],2)
    M2=length([InfoData(1).W]);
    Lc=100;
    [InfoDataBias(k)]=infwordrasterperiodicbias(RAS,B,Fm,M1,M2,T,Lc);
    
    clc
    disp(['Computing raw entropy for jitter=' num2str(sig(k))])
    
end

%Recomputing for Shuffled Raster - Poisson distributed spike times
for k=1:length(sig)
    
    [RAS]=shufflerandraster(RASTER);
%    [RAS]=rasteraddjitterunif(RAS,sig(k),p,lambdan);
    [RAS]=rasteraddjitterpanzeri(RASTER,sig(k));
%    [RAS]=rasteraddjitterpanzericycle(RASTER,sig(k));

%    [InfoDataS(k)]=infwordrasterperiodic(RAS,B,Fm,T);
    [InfoDataS(k)]=infwordrasterperiodicpanzeri(RAS,B,Fm,T)
    clc
    disp(['Computing shuffled entropy for jitter=' num2str(sig(k))])
    
end