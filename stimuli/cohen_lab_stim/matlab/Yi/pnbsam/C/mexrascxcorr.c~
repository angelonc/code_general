/* rascxcorr.c*/
/* (c) Yi Zheng, July 2007 */

# include "mex.h"
# include "engine.h"

# include <stdlib.h>
# include "matrix.h"

# include <stdio.h>
# include <string.h>

void mexrascxcorr(double *rmatrix, double *ras, unsigned long ntrial, unsigned long nsample)
{
 Engine *ep;  
 int k,l,j; 
 int i=0;
 double *a, *b, *r=NULL;
 mxArray *A =NULL, *B=NULL;
 ras = (double*)malloc(ntrial*nsample*sizeof(double) );
 r = (double*)malloc(nsample*sizeof(double) ); 
 
for(k=1;k<ntrial;k++){
    /* printf("Computing cross-channel correlation for channel: %d\n",k); */
    for(l=0;l<=k-1;l++){
        for(j=0;j<nsample;j++){
        *(a+j)=*(ras+k*nsample+j);
        *(b+j)=*(ras+l*nsample+j);
        }
	}
     ep=engOpen("/opt/MATLAB74/bin/MATLAB"); 
    /* if (!(ep = engOpen("\0"))) {
		fprintf(stderr, "\nCan't start MATLAB engine\n");
		return EXIT_FAILURE; 
	}*/
     A = (double*)mxCalloc(nsample, sizeof(double) );
     B = (double*)mxCalloc(nsample, sizeof(double) );
     A = mxCreateDoubleMatrix(1,nsample,mxREAL);
     B = mxCreateDoubleMatrix(1,nsample,mxREAL);
     memcpy((void *)mxGetPr(A), (void *)a, sizeof(a));
     memcpy((void *)mxGetPr(B), (void *)b, sizeof(b));
     /* Place the variable A,B into MATLAB workspace. */
     engPutVariable(ep, "A", A);
     engPutVariable(ep, "B", B);
     engEvalString(ep,"r=xcorrcircular(A,B);");
     mxDestroyArray(A);
     mxDestroyArray(result);
     mxFree(A);
     mxFree(B);
     r = engGetVariable(ep, "r");
    
     engClose(ep); 
     
     for (j=0;j<nsample;j++){
     *(rmatrix+i*nsample+j)=*(r+j);}
     i++;
    }
 free(r);
 free(ras);
}

/* mexFunction is the gateway routine for MEX-files. */
void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
    
    double *ras,*rmatrix;
    int mrows, ncols;
    unsigned long ntrial, nsample;
    mrows = mxGetM(prhs[0]);
    ncols = mxGetN(prhs[0]);
    
    ras = (double*)mxCalloc(ntrial*nsample, sizeof(double) ); 
    rmatrix = (double*)mxCalloc(ntrial*(ntrial-1)/2*nsample, sizeof(double) ); 
    
    ras = mxGetPr(prhs[0]);
    ntrial = mxGetScalar(prhs[1]);
    nsample = mxGetScalar(prhs[2]);
    plhs[0] = mxCreateDoubleMatrix(mrows*(mrows-1)/2 ,ncols,mxREAL);
    rmatrix = mxGetPr(plhs[0]);
    
    mexrascxcorr(rmatrix,ras,ntrial,nsample);
    
    mxFree(ras);
    mxFree(rmatrix);
}











