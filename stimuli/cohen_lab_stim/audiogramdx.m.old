%
%function [AudData]=audiogramdx(data,Fs,dX,dXc,f1,fN,Fm,OF,Norm,dis,ATT)
%	
%	FILE NAME 	: AUDIOGRAMDX
%	DESCRIPTION : Spectro-temporal signal representation obtained 
%                 by applying a octave spaced filterbank and
%                 extracting envelope modulation signal. Uses B-spline
%                 bandpass filters for the filterbank decompostion.
%
%	data    : Input data
%	Fs		: Sampling Rate
%	dX		: Spectral Filter Bandwidth Resolution in Octaves
%			  Usually a fraction of an octave ~ 1/8 would allow 
%			  for a spectral envelope resolution of up to 4 
%			  cycles per octave
%			  Note that X=log2(f/f1) as defined for the ripple 
%			  representation
%   dXc     : Filter center frequency spacing. Note that relationship
%             between dX and dXc determines overlap
%	f1		: Lower frequency to compute spectral decomposition
%	f2		: Upper freqeuncy to compute spectral decomposition
%	Fm		: Maximum Modulation frequency allowed for temporal
%			  envelope at each band
%	OF		: Oversampling Factor for temporal envelope
%			  Since the maximum frequency of the envelope is 
%			  Fm, the Nyquist Frequency is 2*Fm
%			  The Frequency used to sample the envelope is 
%			  2*Fm*OF
%   Norm    : Amplitude normalization (Optional)
%             En:  Equal Energy (Default)
%             Amp: Equal Amplitude
%	dis		: display (optional): 'log' or 'lin' or 'n'
%			  Default == 'n'
%	ATT		: Attenution / Sidelobe error in dB (Optional)
%			  Default == 60 dB
%
%RETURNED DATA
%
%   AudData : Data structure containing audiogram results
%             .taxis   : Time axis
%             .faxis   : Frequency axis
%             .S       : Audiogram
%             .Sf      : Spectral Envelope Distribution
%             .NormGain: Power gain between Energy and Amplitude normalization
%                        This allows you convert between either output by simply
%                        multiplying by the gain. Note that:
%
%             Norm Gain = 'Amp' Normalization Power / 'En' Normalization Power
%
% (C) Monty A. Escabi, Edit Aug 2009
%
function [AudData]=audiogramdx(data,Fs,dX,dXc,f1,fN,Fm,OF,Norm,dis,ATT)

%Input Parameters
if nargin<10
	dis='n';
end
if nargin<11
	ATT=60;
end

%Finding frequency axis for chromatically spaced filter bank
%Note that chromatic spacing requires : f(k) = f(k+1) * 2^dX
X1=0
XN=log2(fN/f1);
L=floor(XN/dXc);
X=(.5:L-.5)/L*XN;
Xc=(0:L)/L*XN;
faxis=f1*2.^X;
fc1=f1*2.^Xc;
fc2=f1*2.^Xc*2^dX;
i=find(fc2<Fs/2);
fc1=fc1(i);
fc2=fc2(i);

%Temporal Down Sampling Factor
DF=floor(Fs/2/Fm/OF);

%Desining Low Pass Filter for Extracting Envelope
He=lowpass(Fm,.2*Fm,Fs,ATT,'n');
Ne=(size(He)-1)/2;

%Filtering data, Extracting Envelope, and Down-Sampling
for k=1:length(fc1)-1

	%Output Display
	clc,disp(['Filtering band ' int2str(k) ' of ' int2str(length(fc1)-1)]) 

	%Designing Filter
	TW=(fc1(k)-fc2(k))/4;
	H=bandpass(fc1(k),fc2(k),TW,Fs,ATT,'n');
	N=(length(H)-1)/2;
    Hen=H/sqrt(sum(H.^2));
    NormGain(k)=sqrt(sum(H.^2))/sqrt(sum(Hen.^2));
    if strcmp(Norm,'En')        %Edit Nov 2008, Escabi
        H=Hen;                  %Equal Energy
    end    
    
	%Filtering at kth Scale
	Y=convfft(data,H,N);

	%Finding Envelope Using the Hilbert Transform
	Y=abs(hilbert(Y));

	%Filtering The Envelope and Downsampling
	Y=convfft(Y,He,Ne);
	S(k,:)=Y(1:DF:length(Y));

    %Spectral Envelope Distribution
    %Sf(k)=sqrt(mean(Y.^2));
    Sf(k)=mean(S(k,:));
    
end
taxis=(0:size(S,2)-1)/(Fs/DF);
faxis=fc1;

%Storing as data structure
AudData.S=S;
AudData.Sf=Sf;
AudData.taxis=taxis;
AudData.faxis=faxis;
AudData.Norm=Norm;
AudData.NormGain=NormGain;